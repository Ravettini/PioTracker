import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { GoogleAuthService } from './google-auth.service';

@Injectable()
export class TokenRenewalCron {
  private readonly logger = new Logger(TokenRenewalCron.name);

  constructor(private readonly googleAuthService: GoogleAuthService) {}

  /**
   * Verifica y renueva el token de Google Sheets cada d√≠a a las 2:00 AM
   */
  @Cron(CronExpression.EVERY_DAY_AT_2AM)
  async handleTokenRenewal() {
    this.logger.log('üîÑ Iniciando verificaci√≥n autom√°tica de token de Google Sheets...');
    
    try {
      const renovado = await this.googleAuthService.renovarTokenSiEsNecesario();
      
      if (renovado) {
        this.logger.log('‚úÖ Token de Google Sheets verificado/renovado exitosamente');
      } else {
        this.logger.warn('‚ö†Ô∏è No se pudo renovar el token autom√°ticamente');
      }
    } catch (error) {
      this.logger.error(`‚ùå Error en verificaci√≥n autom√°tica de token: ${error.message}`);
    }
  }

  /**
   * Verificaci√≥n adicional cada 6 horas para tokens pr√≥ximos a expirar
   */
  @Cron('0 */6 * * *') // Cada 6 horas
  async handleTokenCheck() {
    this.logger.log('üîç Verificaci√≥n peri√≥dica de token de Google Sheets...');
    
    try {
      await this.googleAuthService.renovarTokenSiEsNecesario();
    } catch (error) {
      this.logger.error(`‚ùå Error en verificaci√≥n peri√≥dica: ${error.message}`);
    }
  }
}
